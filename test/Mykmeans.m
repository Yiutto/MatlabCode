function [Idx,centroid]= Mykmeans(k,data)
%Mykmeans：Mykmeans聚类算法
%k：想要聚成类的数目
%data：m*n的数据集

%returns：
   %centroid：k个1*n的聚类质心(k*n)
 
%------------------------------------------------------------------------
% 检查变量是否合格
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% 初始化变量
%------------------------------------------------------------------------
[m,n]=size(data);
centroid=[];%初始化k个质心
sum=zeros(1,n);%用来表示当前聚类中所有数据点之和
%------------------------------------------------------------------------
% 1.随机从data选取k个元素，作为k个聚类的质心
%------------------------------------------------------------------------
for i=1:k
    randnum=floor(m*unifrnd(0,1)+1);
    centroid(i,:)=data(randnum,:); %用来保存k个质心的数组
end

while 1
    %--------------------------------------------------------------------------------
    % 2.分别计算剩下的元素(1...m)到k个聚类质心的欧氏距离，将这些元素规划到欧氏距离最小的聚类
    %--------------------------------------------------------------------------------
    count=zeros(1,k);%记录聚集到相对应的质心的数据个数
    class=[];%初始化class类，用来保存对于data数据集行向量在k个聚类的分布情况
    
    for i=1:m
        for j=1:k
            dist(j)=norm(data(i,:)-centroid(j,:));
        end
        %找到最小距离
        [mindist,dist_index]=min(dist);%dist_index表示数据点规划到聚点k的下标
        count(dist_index)=count(dist_index)+1;%cou
        class(dist_index,count(dist_index))=i;%class(m,n)=i表示第m聚类中的第n个元素所对应的是data数据集的行向量的下标
    end
    %--------------------------------------------------------------------------------
    % 3.重新计算新的聚类（求均值）的质心
    %--------------------------------------------------------------------------------
    for i=1:k
        for j=1:count(i)
            sum=sum+data(class(i,j),:);%将当前聚类所有数据点相加
        end
        temp_centroid(i,:)=sum/(count(i));%求当前聚类的新质心（均值）
        sum(1,:)=0;%置0，为了方便计算下一个聚类的质心
    end
    %--------------------------------------------------------------------------------
    % 4.聚类质心是否收敛（即新质心和原质心相等）也是定义终止条件
    %--------------------------------------------------------------------------------
    for i=1:k
        centroid_dist(i)=norm(temp_centroid(i,:)-centroid(i,:));
    end
    if max(centroid_dist)<=0
        break;
    else
        for i=1:k
            centroid(i,:)=temp_centroid(i,:);
        end
    end
end

%--------------------------------------------------------------------------------
% 5.输出聚类质心和每个点的聚类聚类标号
%-------------------------------------------------------------------------------- 
Idx=[];
for i=1:m
    [a1,a2]=find(class==i);
    Idx(i)=a1;
end


%--------------------------------------------------------------------------------
% 5.输出聚类质心和分类好的聚类
%-------------------------------------------------------------------------------- 
% for i=1:k
%     fprintf('第%d个聚类的质心：',i);
%     centroid(i,:)
%     fprintf('当前聚类的数据：')
%     for j=1:size(class,2)       
%         if(class(i,j)~=0)
%           merge(i).tmp(j,:)= data(class(i,j),:);     
%         end
%     end
%     merge(i).tmp(:,:)
%     fprintf('当前聚类的数据个数为：');
%     size((merge(i).tmp(:,:)),1)
%     fprintf('-------------------------------------------------------\n');    
% end



